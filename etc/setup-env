(
    set -e

    # build a debug version of CPython
    pushd submodules/cpython

    if [ `uname` = "Linux" ];then
        PYTHON_EXE=python
        ./configure --with-pydebug
    elif [ `uname` = "Darwin" ];then
        # install some required packages
        brew install openssl xz

        PYTHON_EXE=python.exe
        CPPFLAGS="-I/opt/X11/include -I$(brew --prefix openssl)/include $CPPFLAGS" \
                LDFLAGS="-L/opt/X11/lib -L$(brew --prefix openssl)/lib $LDFLAGS" \
                ./configure --with-pydebug
    else
        echo "Only GNU+Linux and OSX are supported"
        exit 1
    fi

    make -j4
    popd

    # create a new virtualenv with our debug python build
    ./submodules/cpython/$PYTHON_EXE -m venv venv

    # add the python gdb debug script next to python binary in the venv
    cp submodules/cpython/Tools/gdb/libpython.py venv/bin/python-gdb.py

    # activate our venv
    source venv/bin/activate

    # pip install the things needed to build the docs; ipython is for people
    # to use during the exercises
    pip install ipython
    pip install sphinx
    pip install sphinx-rtd-theme

    # build the sphinx project
    pushd tutorial
    make html
    popd

    ROOT=$PWD

    # make sure we can actually build stuff with this CPython
    pushd exercises/fib
    PYTHON_ASSERTION="
from fib import fib
assert fib(10) == 55, 'fib returned and unexpected value'
"
    if python setup.py build_ext --inplace && \
            python -c "$PYTHON_ASSERTION";then
        rm -r build/
        printf "\nvirtual environment created successfully: $(find $ROOT -maxdepth 1 -name venv)\n"
        printf '\n\nEnvironment is setup correctly!\n'
    fi
    popd
)

if [ $? -eq 0 ];then
    # only activate the venv if the install steps worked, otherwise we mask the
    # error
    source venv/bin/activate
else
    BOLD=$(tput bold)
    RED=$(tput setaf 1)
    NORMAL=$(tput sgr0)
    printf "\n\nEnvironment is $BOLD$RED**not**$NORMAL setup correctly!\n"
fi
